#!/usr/bin/env python3
import math
import itertools
import sys

"""
Problem name:

Highly divisible triangular number

Problem description:

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

N = sys.maxsize


def triangle_number(n, div_num):
    """Computes smallest triangle number with
    div_num divisors

    Args:
        n (int): maximum int size
        div_num (int): number of divisors

    Returns:
        int: triangle number with div_num divisors
    """
    tri_nums = itertools.accumulate(range(1, n))
    for i in tri_nums:
        if divisor_function(i) > div_num:
            return i


def divisor_function(n):
    """Divisor function

    Args:
        n (int): maximum int size

    Returns:
        int: number of divisors for a given number
    """
    c = 2
    end = math.sqrt(n)
    for i in range(1, int(end)):
        if n % i == 0:
            c += 2
    if int(end) == n:
        c += 1
    return c


if __name__ == "__main__":
    print(triangle_number(N, 500))
